{"version":3,"file":"lerc-DK8NKMcz.js","sources":["../node_modules/.pnpm/lerc@3.0.0/node_modules/lerc/LercDecode.js","../node_modules/.pnpm/zstddec@0.1.0/node_modules/zstddec/dist/zstddec.modern.js","../node_modules/.pnpm/geotiff@2.1.3/node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["LercDecode","CntZImage","input","options","skipMask","parsedData","parse","noDataValue","uncompressedData","uncompressPixelValues","result","formatFileInfo","computeUsedBitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","blockIdx","numX","numY","blockWidth","blockHeight","scale","minValue","currentValue","resultPixels","resultMask","blockDataBuffer","xx","yy","y","thisBlockHeight","x","thisBlockWidth","outPtr","outStride","block","blockData","blockPtr","constValue","unstuff","maskByte","numBlocks","bitDepths","i","fp","fileIdView","view","bitset","cnt","ip","op","val","numBlocksX","numBlocksY","actualNumBlocksX","actualNumBlocksY","blockI","blockY","blockX","size","bytesLeft","headerByte","arrayBuf","store8","numPixels","rawData","dataBytes","dataWords","src","bitsPerPixel","offset","dest","maxValue","bitMask","o","bitsLeft","n","buffer","nmax","numInvalidTailBytes","missingBits","Lerc2Decode","BitStuffer","lutArr","bitPos","Lerc2Helpers","sum1","sum2","len","words","tlen","ptr","headerInfo","fileVersion","checksum","keyLength","OutPixelTypeArray","rangeBytes","minValues","maxValues","equal","numBytes","numValidPixel","mask","mb","k","useBSQForOutputDim","numDims","imageType","z","nStart","BITS_MAX","version","i0","i1","codeTable","j","stuffedData","word","srcPtr","numBitsLUT","numBitsLUTQick","tree","TreeNode","decodeLut","entry","code","numEntries","jj","currentBit","node","height","width","huffmanInfo","delta","valTmp","valTmpQuick","ii","prevVal","deltaEncode","resultPixelsAllDim","iDim","viewByteLength","bits67","doLut","numBits","numElements","lutData","lutBytes","zMax","microBlockSize","dataTypeSize","row","col","testCode","bytesleft","blockEncoding","lastBlockHeight","lastBlockWidth","offsetType","fileVersionCheckNum","isDiffEncoding","resultPixelsPrevDim","valMin","t","tp","isValid","s","dt","tc","temp","pixels","inputIsBIP","swap","left","right","bReadDataOneSweep","flagHuffman","diff","count","isPlatformLittleEndian","a","b","c","Lerc","encodedData","inputOffset","fileIdentifierString","lerc","majorVersion","iPlane","eof","encodedMaskData","bandMasks","bandMask","maskData","decodedPixelBlock","uniqueBandMaskCount","module","init","instance","heap","IMPORT_OBJECT","index","ZSTDDecoder","wasm","response","arrayBuffer","array","uncompressedSize","compressedSize","compressedPtr","uncompressedPtr","actualSize","dec","zstd","LercDecoder","BaseDecoder","fileDirectory","LercParameters","LercAddCompression","inflate"],"mappings":"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","x_google_ignoreList":[0,1,2]}