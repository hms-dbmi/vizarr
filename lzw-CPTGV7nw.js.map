{"version":3,"file":"lzw-CPTGV7nw.js","sources":["../node_modules/.pnpm/geotiff@2.1.3/node_modules/geotiff/dist-module/compression/lzw.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"names":["MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","length","d","a","de","ef","fg","dg","chunk1","chunks","chunk2","hi","chunk3","appendReversed","dest","source","i","decompress","input","dictionaryIndex","dictionaryChar","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","result","code","oldCode","val","oldVal","LZWDecoder","BaseDecoder","buffer"],"mappings":"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","x_google_ignoreList":[0]}